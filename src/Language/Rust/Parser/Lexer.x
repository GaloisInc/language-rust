{
{-|
Module      : Language.Rust.Parser.Lexer
Description : Rust lexer
Copyright   : (c) Alec Theriault, 2017-2018
License     : BSD-style
Maintainer  : alec.theriault@gmail.com
Stability   : experimental
Portability : portable

As much as possible, this follows Rust's choices for tokenization, including punting some things to
the parser. For instance, the last two @>@ in @Vec\<Option\<i32\>\>@ are lexed as a single
'GreaterGreater' token while the last two tokens of @Vec\<Option\<Option\<i32\>\>\>@ are
'GreaterGreater' and 'Greater'.

Yet weirder (but very useful in parsing for dealing with conflicts and precedences of logical and,
bitwise and, and unary reference), @&&&x&&&y@ lexes into 'AmpersandAmpersand', 'Ampersand',
@'IdentTok' "x"@, 'AmpersandAmpersand', 'Ampersand', @'IdentTok' "y"@. Although the parser sometimes
needs to "break apart" tokens, it never has to think about putting them together. That means it can
easily figure out that @&&&x&&&y@ parses as @&(&(&x)) && (&y)@ and not @&(&(&x)) & (&(&y))@ even if
bitwise conjunctions bind more tightly that logical conjunctions.

This sort of amguity where one token need to be broken up by the parser occurs for

   * @&&@ in patterns like @&&mut x@
   * @||@ in closures with no arguments like @|| x@
   * @<<@ in qualified type paths like @FromIterator\<\<A as IntoIterator\>::Item\>@
   * @>>@ in qualified paths like @\<Self as Foo\<T\>\>::Bar@
   * @>=@ in equality predicates like @F\<A\>=i32@
   * @>>=@ in equality predicates like @F\<G\<A\>\>=i32@
-}

module Language.Rust.Parser.Lexer (
  -- * Lexing
  lexToken,
  lexNonSpace,
  lexTokens,
  lexShebangLine,

  -- * Tokens
  Token(..),

  -- * Error reporting
  lexicalError,
) where

import Language.Rust.Data.Ident        ( mkIdent, Ident(..) )
import Language.Rust.Data.InputStream
import Language.Rust.Data.Position
import Language.Rust.Parser.ParseMonad
import Language.Rust.Syntax.Token

import Data.Char                       ( chr )
import Data.Word                       ( Word8 )

-- Things to review:
--   * improved error messages

}

-- NOTE: The following code was generated by "scripts/unicode.py", do not edit directly
--
-- If you need to update this code, perform the following steps:
--
-- 1. (Optional) Update the value of `unicode_version` in "scripts/unicode.py".
-- 2. Run the "scripts/unicode.py" script.
-- 3. Copy the code (including the comments) in the autogenerated `UnicodeLexer.x` file.
-- 4. Replace the existing autogenerated code here.

-- Based on Unicode 15.1.0, using the following Unicode table:
-- http://www.unicode.org/Public/15.1.0/ucd/DerviedCoreProperties.txt

@XID_Start
  = [\x0041-\x005a]
  | [\x0061-\x007a]
  | \x00aa
  | \x00b5
  | \x00ba
  | [\x00c0-\x00d6]
  | [\x00d8-\x00f6]
  | [\x00f8-\x02c1]
  | [\x02c6-\x02d1]
  | [\x02e0-\x02e4]
  | \x02ec
  | \x02ee
  | [\x0370-\x0374]
  | [\x0376-\x0377]
  | [\x037b-\x037d]
  | \x037f
  | \x0386
  | [\x0388-\x038a]
  | \x038c
  | [\x038e-\x03a1]
  | [\x03a3-\x03f5]
  | [\x03f7-\x0481]
  | [\x048a-\x052f]
  | [\x0531-\x0556]
  | \x0559
  | [\x0560-\x0588]
  | [\x05d0-\x05ea]
  | [\x05ef-\x05f2]
  | [\x0620-\x064a]
  | [\x066e-\x066f]
  | [\x0671-\x06d3]
  | \x06d5
  | [\x06e5-\x06e6]
  | [\x06ee-\x06ef]
  | [\x06fa-\x06fc]
  | \x06ff
  | \x0710
  | [\x0712-\x072f]
  | [\x074d-\x07a5]
  | \x07b1
  | [\x07ca-\x07ea]
  | [\x07f4-\x07f5]
  | \x07fa
  | [\x0800-\x0815]
  | \x081a
  | \x0824
  | \x0828
  | [\x0840-\x0858]
  | [\x0860-\x086a]
  | [\x0870-\x0887]
  | [\x0889-\x088e]
  | [\x08a0-\x08c9]
  | [\x0904-\x0939]
  | \x093d
  | \x0950
  | [\x0958-\x0961]
  | [\x0971-\x0980]
  | [\x0985-\x098c]
  | [\x098f-\x0990]
  | [\x0993-\x09a8]
  | [\x09aa-\x09b0]
  | \x09b2
  | [\x09b6-\x09b9]
  | \x09bd
  | \x09ce
  | [\x09dc-\x09dd]
  | [\x09df-\x09e1]
  | [\x09f0-\x09f1]
  | \x09fc
  | [\x0a05-\x0a0a]
  | [\x0a0f-\x0a10]
  | [\x0a13-\x0a28]
  | [\x0a2a-\x0a30]
  | [\x0a32-\x0a33]
  | [\x0a35-\x0a36]
  | [\x0a38-\x0a39]
  | [\x0a59-\x0a5c]
  | \x0a5e
  | [\x0a72-\x0a74]
  | [\x0a85-\x0a8d]
  | [\x0a8f-\x0a91]
  | [\x0a93-\x0aa8]
  | [\x0aaa-\x0ab0]
  | [\x0ab2-\x0ab3]
  | [\x0ab5-\x0ab9]
  | \x0abd
  | \x0ad0
  | [\x0ae0-\x0ae1]
  | \x0af9
  | [\x0b05-\x0b0c]
  | [\x0b0f-\x0b10]
  | [\x0b13-\x0b28]
  | [\x0b2a-\x0b30]
  | [\x0b32-\x0b33]
  | [\x0b35-\x0b39]
  | \x0b3d
  | [\x0b5c-\x0b5d]
  | [\x0b5f-\x0b61]
  | \x0b71
  | \x0b83
  | [\x0b85-\x0b8a]
  | [\x0b8e-\x0b90]
  | [\x0b92-\x0b95]
  | [\x0b99-\x0b9a]
  | \x0b9c
  | [\x0b9e-\x0b9f]
  | [\x0ba3-\x0ba4]
  | [\x0ba8-\x0baa]
  | [\x0bae-\x0bb9]
  | \x0bd0
  | [\x0c05-\x0c0c]
  | [\x0c0e-\x0c10]
  | [\x0c12-\x0c28]
  | [\x0c2a-\x0c39]
  | \x0c3d
  | [\x0c58-\x0c5a]
  | \x0c5d
  | [\x0c60-\x0c61]
  | \x0c80
  | [\x0c85-\x0c8c]
  | [\x0c8e-\x0c90]
  | [\x0c92-\x0ca8]
  | [\x0caa-\x0cb3]
  | [\x0cb5-\x0cb9]
  | \x0cbd
  | [\x0cdd-\x0cde]
  | [\x0ce0-\x0ce1]
  | [\x0cf1-\x0cf2]
  | [\x0d04-\x0d0c]
  | [\x0d0e-\x0d10]
  | [\x0d12-\x0d3a]
  | \x0d3d
  | \x0d4e
  | [\x0d54-\x0d56]
  | [\x0d5f-\x0d61]
  | [\x0d7a-\x0d7f]
  | [\x0d85-\x0d96]
  | [\x0d9a-\x0db1]
  | [\x0db3-\x0dbb]
  | \x0dbd
  | [\x0dc0-\x0dc6]
  | [\x0e01-\x0e30]
  | \x0e32
  | [\x0e40-\x0e46]
  | [\x0e81-\x0e82]
  | \x0e84
  | [\x0e86-\x0e8a]
  | [\x0e8c-\x0ea3]
  | \x0ea5
  | [\x0ea7-\x0eb0]
  | \x0eb2
  | \x0ebd
  | [\x0ec0-\x0ec4]
  | \x0ec6
  | [\x0edc-\x0edf]
  | \x0f00
  | [\x0f40-\x0f47]
  | [\x0f49-\x0f6c]
  | [\x0f88-\x0f8c]
  | [\x1000-\x102a]
  | \x103f
  | [\x1050-\x1055]
  | [\x105a-\x105d]
  | \x1061
  | [\x1065-\x1066]
  | [\x106e-\x1070]
  | [\x1075-\x1081]
  | \x108e
  | [\x10a0-\x10c5]
  | \x10c7
  | \x10cd
  | [\x10d0-\x10fa]
  | [\x10fc-\x1248]
  | [\x124a-\x124d]
  | [\x1250-\x1256]
  | \x1258
  | [\x125a-\x125d]
  | [\x1260-\x1288]
  | [\x128a-\x128d]
  | [\x1290-\x12b0]
  | [\x12b2-\x12b5]
  | [\x12b8-\x12be]
  | \x12c0
  | [\x12c2-\x12c5]
  | [\x12c8-\x12d6]
  | [\x12d8-\x1310]
  | [\x1312-\x1315]
  | [\x1318-\x135a]
  | [\x1380-\x138f]
  | [\x13a0-\x13f5]
  | [\x13f8-\x13fd]
  | [\x1401-\x166c]
  | [\x166f-\x167f]
  | [\x1681-\x169a]
  | [\x16a0-\x16ea]
  | [\x16ee-\x16f8]
  | [\x1700-\x1711]
  | [\x171f-\x1731]
  | [\x1740-\x1751]
  | [\x1760-\x176c]
  | [\x176e-\x1770]
  | [\x1780-\x17b3]
  | \x17d7
  | \x17dc
  | [\x1820-\x1878]
  | [\x1880-\x18a8]
  | \x18aa
  | [\x18b0-\x18f5]
  | [\x1900-\x191e]
  | [\x1950-\x196d]
  | [\x1970-\x1974]
  | [\x1980-\x19ab]
  | [\x19b0-\x19c9]
  | [\x1a00-\x1a16]
  | [\x1a20-\x1a54]
  | \x1aa7
  | [\x1b05-\x1b33]
  | [\x1b45-\x1b4c]
  | [\x1b83-\x1ba0]
  | [\x1bae-\x1baf]
  | [\x1bba-\x1be5]
  | [\x1c00-\x1c23]
  | [\x1c4d-\x1c4f]
  | [\x1c5a-\x1c7d]
  | [\x1c80-\x1c88]
  | [\x1c90-\x1cba]
  | [\x1cbd-\x1cbf]
  | [\x1ce9-\x1cec]
  | [\x1cee-\x1cf3]
  | [\x1cf5-\x1cf6]
  | \x1cfa
  | [\x1d00-\x1dbf]
  | [\x1e00-\x1f15]
  | [\x1f18-\x1f1d]
  | [\x1f20-\x1f45]
  | [\x1f48-\x1f4d]
  | [\x1f50-\x1f57]
  | \x1f59
  | \x1f5b
  | \x1f5d
  | [\x1f5f-\x1f7d]
  | [\x1f80-\x1fb4]
  | [\x1fb6-\x1fbc]
  | \x1fbe
  | [\x1fc2-\x1fc4]
  | [\x1fc6-\x1fcc]
  | [\x1fd0-\x1fd3]
  | [\x1fd6-\x1fdb]
  | [\x1fe0-\x1fec]
  | [\x1ff2-\x1ff4]
  | [\x1ff6-\x1ffc]
  | \x2071
  | \x207f
  | [\x2090-\x209c]
  | \x2102
  | \x2107
  | [\x210a-\x2113]
  | \x2115
  | [\x2118-\x211d]
  | \x2124
  | \x2126
  | \x2128
  | [\x212a-\x2139]
  | [\x213c-\x213f]
  | [\x2145-\x2149]
  | \x214e
  | [\x2160-\x2188]
  | [\x2c00-\x2ce4]
  | [\x2ceb-\x2cee]
  | [\x2cf2-\x2cf3]
  | [\x2d00-\x2d25]
  | \x2d27
  | \x2d2d
  | [\x2d30-\x2d67]
  | \x2d6f
  | [\x2d80-\x2d96]
  | [\x2da0-\x2da6]
  | [\x2da8-\x2dae]
  | [\x2db0-\x2db6]
  | [\x2db8-\x2dbe]
  | [\x2dc0-\x2dc6]
  | [\x2dc8-\x2dce]
  | [\x2dd0-\x2dd6]
  | [\x2dd8-\x2dde]
  | [\x3005-\x3007]
  | [\x3021-\x3029]
  | [\x3031-\x3035]
  | [\x3038-\x303c]
  | [\x3041-\x3096]
  | [\x309d-\x309f]
  | [\x30a1-\x30fa]
  | [\x30fc-\x30ff]
  | [\x3105-\x312f]
  | [\x3131-\x318e]
  | [\x31a0-\x31bf]
  | [\x31f0-\x31ff]
  | [\x3400-\x4dbf]
  | [\x4e00-\xa48c]
  | [\xa4d0-\xa4fd]
  | [\xa500-\xa60c]
  | [\xa610-\xa61f]
  | [\xa62a-\xa62b]
  | [\xa640-\xa66e]
  | [\xa67f-\xa69d]
  | [\xa6a0-\xa6ef]
  | [\xa717-\xa71f]
  | [\xa722-\xa788]
  | [\xa78b-\xa7ca]
  | [\xa7d0-\xa7d1]
  | \xa7d3
  | [\xa7d5-\xa7d9]
  | [\xa7f2-\xa801]
  | [\xa803-\xa805]
  | [\xa807-\xa80a]
  | [\xa80c-\xa822]
  | [\xa840-\xa873]
  | [\xa882-\xa8b3]
  | [\xa8f2-\xa8f7]
  | \xa8fb
  | [\xa8fd-\xa8fe]
  | [\xa90a-\xa925]
  | [\xa930-\xa946]
  | [\xa960-\xa97c]
  | [\xa984-\xa9b2]
  | \xa9cf
  | [\xa9e0-\xa9e4]
  | [\xa9e6-\xa9ef]
  | [\xa9fa-\xa9fe]
  | [\xaa00-\xaa28]
  | [\xaa40-\xaa42]
  | [\xaa44-\xaa4b]
  | [\xaa60-\xaa76]
  | \xaa7a
  | [\xaa7e-\xaaaf]
  | \xaab1
  | [\xaab5-\xaab6]
  | [\xaab9-\xaabd]
  | \xaac0
  | \xaac2
  | [\xaadb-\xaadd]
  | [\xaae0-\xaaea]
  | [\xaaf2-\xaaf4]
  | [\xab01-\xab06]
  | [\xab09-\xab0e]
  | [\xab11-\xab16]
  | [\xab20-\xab26]
  | [\xab28-\xab2e]
  | [\xab30-\xab5a]
  | [\xab5c-\xab69]
  | [\xab70-\xabe2]
  | [\xac00-\xd7a3]
  | [\xd7b0-\xd7c6]
  | [\xd7cb-\xd7fb]
  | [\xf900-\xfa6d]
  | [\xfa70-\xfad9]
  | [\xfb00-\xfb06]
  | [\xfb13-\xfb17]
  | \xfb1d
  | [\xfb1f-\xfb28]
  | [\xfb2a-\xfb36]
  | [\xfb38-\xfb3c]
  | \xfb3e
  | [\xfb40-\xfb41]
  | [\xfb43-\xfb44]
  | [\xfb46-\xfbb1]
  | [\xfbd3-\xfc5d]
  | [\xfc64-\xfd3d]
  | [\xfd50-\xfd8f]
  | [\xfd92-\xfdc7]
  | [\xfdf0-\xfdf9]
  | \xfe71
  | \xfe73
  | \xfe77
  | \xfe79
  | \xfe7b
  | \xfe7d
  | [\xfe7f-\xfefc]
  | [\xff21-\xff3a]
  | [\xff41-\xff5a]
  | [\xff66-\xff9d]
  | [\xffa0-\xffbe]
  | [\xffc2-\xffc7]
  | [\xffca-\xffcf]
  | [\xffd2-\xffd7]
  | [\xffda-\xffdc]
  | [\x10000-\x1000b]
  | [\x1000d-\x10026]
  | [\x10028-\x1003a]
  | [\x1003c-\x1003d]
  | [\x1003f-\x1004d]
  | [\x10050-\x1005d]
  | [\x10080-\x100fa]
  | [\x10140-\x10174]
  | [\x10280-\x1029c]
  | [\x102a0-\x102d0]
  | [\x10300-\x1031f]
  | [\x1032d-\x1034a]
  | [\x10350-\x10375]
  | [\x10380-\x1039d]
  | [\x103a0-\x103c3]
  | [\x103c8-\x103cf]
  | [\x103d1-\x103d5]
  | [\x10400-\x1049d]
  | [\x104b0-\x104d3]
  | [\x104d8-\x104fb]
  | [\x10500-\x10527]
  | [\x10530-\x10563]
  | [\x10570-\x1057a]
  | [\x1057c-\x1058a]
  | [\x1058c-\x10592]
  | [\x10594-\x10595]
  | [\x10597-\x105a1]
  | [\x105a3-\x105b1]
  | [\x105b3-\x105b9]
  | [\x105bb-\x105bc]
  | [\x10600-\x10736]
  | [\x10740-\x10755]
  | [\x10760-\x10767]
  | [\x10780-\x10785]
  | [\x10787-\x107b0]
  | [\x107b2-\x107ba]
  | [\x10800-\x10805]
  | \x10808
  | [\x1080a-\x10835]
  | [\x10837-\x10838]
  | \x1083c
  | [\x1083f-\x10855]
  | [\x10860-\x10876]
  | [\x10880-\x1089e]
  | [\x108e0-\x108f2]
  | [\x108f4-\x108f5]
  | [\x10900-\x10915]
  | [\x10920-\x10939]
  | [\x10980-\x109b7]
  | [\x109be-\x109bf]
  | \x10a00
  | [\x10a10-\x10a13]
  | [\x10a15-\x10a17]
  | [\x10a19-\x10a35]
  | [\x10a60-\x10a7c]
  | [\x10a80-\x10a9c]
  | [\x10ac0-\x10ac7]
  | [\x10ac9-\x10ae4]
  | [\x10b00-\x10b35]
  | [\x10b40-\x10b55]
  | [\x10b60-\x10b72]
  | [\x10b80-\x10b91]
  | [\x10c00-\x10c48]
  | [\x10c80-\x10cb2]
  | [\x10cc0-\x10cf2]
  | [\x10d00-\x10d23]
  | [\x10e80-\x10ea9]
  | [\x10eb0-\x10eb1]
  | [\x10f00-\x10f1c]
  | \x10f27
  | [\x10f30-\x10f45]
  | [\x10f70-\x10f81]
  | [\x10fb0-\x10fc4]
  | [\x10fe0-\x10ff6]
  | [\x11003-\x11037]
  | [\x11071-\x11072]
  | \x11075
  | [\x11083-\x110af]
  | [\x110d0-\x110e8]
  | [\x11103-\x11126]
  | \x11144
  | \x11147
  | [\x11150-\x11172]
  | \x11176
  | [\x11183-\x111b2]
  | [\x111c1-\x111c4]
  | \x111da
  | \x111dc
  | [\x11200-\x11211]
  | [\x11213-\x1122b]
  | [\x1123f-\x11240]
  | [\x11280-\x11286]
  | \x11288
  | [\x1128a-\x1128d]
  | [\x1128f-\x1129d]
  | [\x1129f-\x112a8]
  | [\x112b0-\x112de]
  | [\x11305-\x1130c]
  | [\x1130f-\x11310]
  | [\x11313-\x11328]
  | [\x1132a-\x11330]
  | [\x11332-\x11333]
  | [\x11335-\x11339]
  | \x1133d
  | \x11350
  | [\x1135d-\x11361]
  | [\x11400-\x11434]
  | [\x11447-\x1144a]
  | [\x1145f-\x11461]
  | [\x11480-\x114af]
  | [\x114c4-\x114c5]
  | \x114c7
  | [\x11580-\x115ae]
  | [\x115d8-\x115db]
  | [\x11600-\x1162f]
  | \x11644
  | [\x11680-\x116aa]
  | \x116b8
  | [\x11700-\x1171a]
  | [\x11740-\x11746]
  | [\x11800-\x1182b]
  | [\x118a0-\x118df]
  | [\x118ff-\x11906]
  | \x11909
  | [\x1190c-\x11913]
  | [\x11915-\x11916]
  | [\x11918-\x1192f]
  | \x1193f
  | \x11941
  | [\x119a0-\x119a7]
  | [\x119aa-\x119d0]
  | \x119e1
  | \x119e3
  | \x11a00
  | [\x11a0b-\x11a32]
  | \x11a3a
  | \x11a50
  | [\x11a5c-\x11a89]
  | \x11a9d
  | [\x11ab0-\x11af8]
  | [\x11c00-\x11c08]
  | [\x11c0a-\x11c2e]
  | \x11c40
  | [\x11c72-\x11c8f]
  | [\x11d00-\x11d06]
  | [\x11d08-\x11d09]
  | [\x11d0b-\x11d30]
  | \x11d46
  | [\x11d60-\x11d65]
  | [\x11d67-\x11d68]
  | [\x11d6a-\x11d89]
  | \x11d98
  | [\x11ee0-\x11ef2]
  | \x11f02
  | [\x11f04-\x11f10]
  | [\x11f12-\x11f33]
  | \x11fb0
  | [\x12000-\x12399]
  | [\x12400-\x1246e]
  | [\x12480-\x12543]
  | [\x12f90-\x12ff0]
  | [\x13000-\x1342f]
  | [\x13441-\x13446]
  | [\x14400-\x14646]
  | [\x16800-\x16a38]
  | [\x16a40-\x16a5e]
  | [\x16a70-\x16abe]
  | [\x16ad0-\x16aed]
  | [\x16b00-\x16b2f]
  | [\x16b40-\x16b43]
  | [\x16b63-\x16b77]
  | [\x16b7d-\x16b8f]
  | [\x16e40-\x16e7f]
  | [\x16f00-\x16f4a]
  | \x16f50
  | [\x16f93-\x16f9f]
  | [\x16fe0-\x16fe1]
  | \x16fe3
  | [\x17000-\x187f7]
  | [\x18800-\x18cd5]
  | [\x18d00-\x18d08]
  | [\x1aff0-\x1aff3]
  | [\x1aff5-\x1affb]
  | [\x1affd-\x1affe]
  | [\x1b000-\x1b122]
  | \x1b132
  | [\x1b150-\x1b152]
  | \x1b155
  | [\x1b164-\x1b167]
  | [\x1b170-\x1b2fb]
  | [\x1bc00-\x1bc6a]
  | [\x1bc70-\x1bc7c]
  | [\x1bc80-\x1bc88]
  | [\x1bc90-\x1bc99]
  | [\x1d400-\x1d454]
  | [\x1d456-\x1d49c]
  | [\x1d49e-\x1d49f]
  | \x1d4a2
  | [\x1d4a5-\x1d4a6]
  | [\x1d4a9-\x1d4ac]
  | [\x1d4ae-\x1d4b9]
  | \x1d4bb
  | [\x1d4bd-\x1d4c3]
  | [\x1d4c5-\x1d505]
  | [\x1d507-\x1d50a]
  | [\x1d50d-\x1d514]
  | [\x1d516-\x1d51c]
  | [\x1d51e-\x1d539]
  | [\x1d53b-\x1d53e]
  | [\x1d540-\x1d544]
  | \x1d546
  | [\x1d54a-\x1d550]
  | [\x1d552-\x1d6a5]
  | [\x1d6a8-\x1d6c0]
  | [\x1d6c2-\x1d6da]
  | [\x1d6dc-\x1d6fa]
  | [\x1d6fc-\x1d714]
  | [\x1d716-\x1d734]
  | [\x1d736-\x1d74e]
  | [\x1d750-\x1d76e]
  | [\x1d770-\x1d788]
  | [\x1d78a-\x1d7a8]
  | [\x1d7aa-\x1d7c2]
  | [\x1d7c4-\x1d7cb]
  | [\x1df00-\x1df1e]
  | [\x1df25-\x1df2a]
  | [\x1e030-\x1e06d]
  | [\x1e100-\x1e12c]
  | [\x1e137-\x1e13d]
  | \x1e14e
  | [\x1e290-\x1e2ad]
  | [\x1e2c0-\x1e2eb]
  | [\x1e4d0-\x1e4eb]
  | [\x1e7e0-\x1e7e6]
  | [\x1e7e8-\x1e7eb]
  | [\x1e7ed-\x1e7ee]
  | [\x1e7f0-\x1e7fe]
  | [\x1e800-\x1e8c4]
  | [\x1e900-\x1e943]
  | \x1e94b
  | [\x1ee00-\x1ee03]
  | [\x1ee05-\x1ee1f]
  | [\x1ee21-\x1ee22]
  | \x1ee24
  | \x1ee27
  | [\x1ee29-\x1ee32]
  | [\x1ee34-\x1ee37]
  | \x1ee39
  | \x1ee3b
  | \x1ee42
  | \x1ee47
  | \x1ee49
  | \x1ee4b
  | [\x1ee4d-\x1ee4f]
  | [\x1ee51-\x1ee52]
  | \x1ee54
  | \x1ee57
  | \x1ee59
  | \x1ee5b
  | \x1ee5d
  | \x1ee5f
  | [\x1ee61-\x1ee62]
  | \x1ee64
  | [\x1ee67-\x1ee6a]
  | [\x1ee6c-\x1ee72]
  | [\x1ee74-\x1ee77]
  | [\x1ee79-\x1ee7c]
  | \x1ee7e
  | [\x1ee80-\x1ee89]
  | [\x1ee8b-\x1ee9b]
  | [\x1eea1-\x1eea3]
  | [\x1eea5-\x1eea9]
  | [\x1eeab-\x1eebb]
  | [\x20000-\x2a6df]
  | [\x2a700-\x2b739]
  | [\x2b740-\x2b81d]
  | [\x2b820-\x2cea1]
  | [\x2ceb0-\x2ebe0]
  | [\x2ebf0-\x2ee5d]
  | [\x2f800-\x2fa1d]
  | [\x30000-\x3134a]
  | [\x31350-\x323af]

@XID_Continue
  = [\x0030-\x0039]
  | [\x0041-\x005a]
  | \x005f
  | [\x0061-\x007a]
  | \x00aa
  | \x00b5
  | \x00b7
  | \x00ba
  | [\x00c0-\x00d6]
  | [\x00d8-\x00f6]
  | [\x00f8-\x02c1]
  | [\x02c6-\x02d1]
  | [\x02e0-\x02e4]
  | \x02ec
  | \x02ee
  | [\x0300-\x0374]
  | [\x0376-\x0377]
  | [\x037b-\x037d]
  | \x037f
  | [\x0386-\x038a]
  | \x038c
  | [\x038e-\x03a1]
  | [\x03a3-\x03f5]
  | [\x03f7-\x0481]
  | [\x0483-\x0487]
  | [\x048a-\x052f]
  | [\x0531-\x0556]
  | \x0559
  | [\x0560-\x0588]
  | [\x0591-\x05bd]
  | \x05bf
  | [\x05c1-\x05c2]
  | [\x05c4-\x05c5]
  | \x05c7
  | [\x05d0-\x05ea]
  | [\x05ef-\x05f2]
  | [\x0610-\x061a]
  | [\x0620-\x0669]
  | [\x066e-\x06d3]
  | [\x06d5-\x06dc]
  | [\x06df-\x06e8]
  | [\x06ea-\x06fc]
  | \x06ff
  | [\x0710-\x074a]
  | [\x074d-\x07b1]
  | [\x07c0-\x07f5]
  | \x07fa
  | \x07fd
  | [\x0800-\x082d]
  | [\x0840-\x085b]
  | [\x0860-\x086a]
  | [\x0870-\x0887]
  | [\x0889-\x088e]
  | [\x0898-\x08e1]
  | [\x08e3-\x0963]
  | [\x0966-\x096f]
  | [\x0971-\x0983]
  | [\x0985-\x098c]
  | [\x098f-\x0990]
  | [\x0993-\x09a8]
  | [\x09aa-\x09b0]
  | \x09b2
  | [\x09b6-\x09b9]
  | [\x09bc-\x09c4]
  | [\x09c7-\x09c8]
  | [\x09cb-\x09ce]
  | \x09d7
  | [\x09dc-\x09dd]
  | [\x09df-\x09e3]
  | [\x09e6-\x09f1]
  | \x09fc
  | \x09fe
  | [\x0a01-\x0a03]
  | [\x0a05-\x0a0a]
  | [\x0a0f-\x0a10]
  | [\x0a13-\x0a28]
  | [\x0a2a-\x0a30]
  | [\x0a32-\x0a33]
  | [\x0a35-\x0a36]
  | [\x0a38-\x0a39]
  | \x0a3c
  | [\x0a3e-\x0a42]
  | [\x0a47-\x0a48]
  | [\x0a4b-\x0a4d]
  | \x0a51
  | [\x0a59-\x0a5c]
  | \x0a5e
  | [\x0a66-\x0a75]
  | [\x0a81-\x0a83]
  | [\x0a85-\x0a8d]
  | [\x0a8f-\x0a91]
  | [\x0a93-\x0aa8]
  | [\x0aaa-\x0ab0]
  | [\x0ab2-\x0ab3]
  | [\x0ab5-\x0ab9]
  | [\x0abc-\x0ac5]
  | [\x0ac7-\x0ac9]
  | [\x0acb-\x0acd]
  | \x0ad0
  | [\x0ae0-\x0ae3]
  | [\x0ae6-\x0aef]
  | [\x0af9-\x0aff]
  | [\x0b01-\x0b03]
  | [\x0b05-\x0b0c]
  | [\x0b0f-\x0b10]
  | [\x0b13-\x0b28]
  | [\x0b2a-\x0b30]
  | [\x0b32-\x0b33]
  | [\x0b35-\x0b39]
  | [\x0b3c-\x0b44]
  | [\x0b47-\x0b48]
  | [\x0b4b-\x0b4d]
  | [\x0b55-\x0b57]
  | [\x0b5c-\x0b5d]
  | [\x0b5f-\x0b63]
  | [\x0b66-\x0b6f]
  | \x0b71
  | [\x0b82-\x0b83]
  | [\x0b85-\x0b8a]
  | [\x0b8e-\x0b90]
  | [\x0b92-\x0b95]
  | [\x0b99-\x0b9a]
  | \x0b9c
  | [\x0b9e-\x0b9f]
  | [\x0ba3-\x0ba4]
  | [\x0ba8-\x0baa]
  | [\x0bae-\x0bb9]
  | [\x0bbe-\x0bc2]
  | [\x0bc6-\x0bc8]
  | [\x0bca-\x0bcd]
  | \x0bd0
  | \x0bd7
  | [\x0be6-\x0bef]
  | [\x0c00-\x0c0c]
  | [\x0c0e-\x0c10]
  | [\x0c12-\x0c28]
  | [\x0c2a-\x0c39]
  | [\x0c3c-\x0c44]
  | [\x0c46-\x0c48]
  | [\x0c4a-\x0c4d]
  | [\x0c55-\x0c56]
  | [\x0c58-\x0c5a]
  | \x0c5d
  | [\x0c60-\x0c63]
  | [\x0c66-\x0c6f]
  | [\x0c80-\x0c83]
  | [\x0c85-\x0c8c]
  | [\x0c8e-\x0c90]
  | [\x0c92-\x0ca8]
  | [\x0caa-\x0cb3]
  | [\x0cb5-\x0cb9]
  | [\x0cbc-\x0cc4]
  | [\x0cc6-\x0cc8]
  | [\x0cca-\x0ccd]
  | [\x0cd5-\x0cd6]
  | [\x0cdd-\x0cde]
  | [\x0ce0-\x0ce3]
  | [\x0ce6-\x0cef]
  | [\x0cf1-\x0cf3]
  | [\x0d00-\x0d0c]
  | [\x0d0e-\x0d10]
  | [\x0d12-\x0d44]
  | [\x0d46-\x0d48]
  | [\x0d4a-\x0d4e]
  | [\x0d54-\x0d57]
  | [\x0d5f-\x0d63]
  | [\x0d66-\x0d6f]
  | [\x0d7a-\x0d7f]
  | [\x0d81-\x0d83]
  | [\x0d85-\x0d96]
  | [\x0d9a-\x0db1]
  | [\x0db3-\x0dbb]
  | \x0dbd
  | [\x0dc0-\x0dc6]
  | \x0dca
  | [\x0dcf-\x0dd4]
  | \x0dd6
  | [\x0dd8-\x0ddf]
  | [\x0de6-\x0def]
  | [\x0df2-\x0df3]
  | [\x0e01-\x0e3a]
  | [\x0e40-\x0e4e]
  | [\x0e50-\x0e59]
  | [\x0e81-\x0e82]
  | \x0e84
  | [\x0e86-\x0e8a]
  | [\x0e8c-\x0ea3]
  | \x0ea5
  | [\x0ea7-\x0ebd]
  | [\x0ec0-\x0ec4]
  | \x0ec6
  | [\x0ec8-\x0ece]
  | [\x0ed0-\x0ed9]
  | [\x0edc-\x0edf]
  | \x0f00
  | [\x0f18-\x0f19]
  | [\x0f20-\x0f29]
  | \x0f35
  | \x0f37
  | \x0f39
  | [\x0f3e-\x0f47]
  | [\x0f49-\x0f6c]
  | [\x0f71-\x0f84]
  | [\x0f86-\x0f97]
  | [\x0f99-\x0fbc]
  | \x0fc6
  | [\x1000-\x1049]
  | [\x1050-\x109d]
  | [\x10a0-\x10c5]
  | \x10c7
  | \x10cd
  | [\x10d0-\x10fa]
  | [\x10fc-\x1248]
  | [\x124a-\x124d]
  | [\x1250-\x1256]
  | \x1258
  | [\x125a-\x125d]
  | [\x1260-\x1288]
  | [\x128a-\x128d]
  | [\x1290-\x12b0]
  | [\x12b2-\x12b5]
  | [\x12b8-\x12be]
  | \x12c0
  | [\x12c2-\x12c5]
  | [\x12c8-\x12d6]
  | [\x12d8-\x1310]
  | [\x1312-\x1315]
  | [\x1318-\x135a]
  | [\x135d-\x135f]
  | [\x1369-\x1371]
  | [\x1380-\x138f]
  | [\x13a0-\x13f5]
  | [\x13f8-\x13fd]
  | [\x1401-\x166c]
  | [\x166f-\x167f]
  | [\x1681-\x169a]
  | [\x16a0-\x16ea]
  | [\x16ee-\x16f8]
  | [\x1700-\x1715]
  | [\x171f-\x1734]
  | [\x1740-\x1753]
  | [\x1760-\x176c]
  | [\x176e-\x1770]
  | [\x1772-\x1773]
  | [\x1780-\x17d3]
  | \x17d7
  | [\x17dc-\x17dd]
  | [\x17e0-\x17e9]
  | [\x180b-\x180d]
  | [\x180f-\x1819]
  | [\x1820-\x1878]
  | [\x1880-\x18aa]
  | [\x18b0-\x18f5]
  | [\x1900-\x191e]
  | [\x1920-\x192b]
  | [\x1930-\x193b]
  | [\x1946-\x196d]
  | [\x1970-\x1974]
  | [\x1980-\x19ab]
  | [\x19b0-\x19c9]
  | [\x19d0-\x19da]
  | [\x1a00-\x1a1b]
  | [\x1a20-\x1a5e]
  | [\x1a60-\x1a7c]
  | [\x1a7f-\x1a89]
  | [\x1a90-\x1a99]
  | \x1aa7
  | [\x1ab0-\x1abd]
  | [\x1abf-\x1ace]
  | [\x1b00-\x1b4c]
  | [\x1b50-\x1b59]
  | [\x1b6b-\x1b73]
  | [\x1b80-\x1bf3]
  | [\x1c00-\x1c37]
  | [\x1c40-\x1c49]
  | [\x1c4d-\x1c7d]
  | [\x1c80-\x1c88]
  | [\x1c90-\x1cba]
  | [\x1cbd-\x1cbf]
  | [\x1cd0-\x1cd2]
  | [\x1cd4-\x1cfa]
  | [\x1d00-\x1f15]
  | [\x1f18-\x1f1d]
  | [\x1f20-\x1f45]
  | [\x1f48-\x1f4d]
  | [\x1f50-\x1f57]
  | \x1f59
  | \x1f5b
  | \x1f5d
  | [\x1f5f-\x1f7d]
  | [\x1f80-\x1fb4]
  | [\x1fb6-\x1fbc]
  | \x1fbe
  | [\x1fc2-\x1fc4]
  | [\x1fc6-\x1fcc]
  | [\x1fd0-\x1fd3]
  | [\x1fd6-\x1fdb]
  | [\x1fe0-\x1fec]
  | [\x1ff2-\x1ff4]
  | [\x1ff6-\x1ffc]
  | [\x200c-\x200d]
  | [\x203f-\x2040]
  | \x2054
  | \x2071
  | \x207f
  | [\x2090-\x209c]
  | [\x20d0-\x20dc]
  | \x20e1
  | [\x20e5-\x20f0]
  | \x2102
  | \x2107
  | [\x210a-\x2113]
  | \x2115
  | [\x2118-\x211d]
  | \x2124
  | \x2126
  | \x2128
  | [\x212a-\x2139]
  | [\x213c-\x213f]
  | [\x2145-\x2149]
  | \x214e
  | [\x2160-\x2188]
  | [\x2c00-\x2ce4]
  | [\x2ceb-\x2cf3]
  | [\x2d00-\x2d25]
  | \x2d27
  | \x2d2d
  | [\x2d30-\x2d67]
  | \x2d6f
  | [\x2d7f-\x2d96]
  | [\x2da0-\x2da6]
  | [\x2da8-\x2dae]
  | [\x2db0-\x2db6]
  | [\x2db8-\x2dbe]
  | [\x2dc0-\x2dc6]
  | [\x2dc8-\x2dce]
  | [\x2dd0-\x2dd6]
  | [\x2dd8-\x2dde]
  | [\x2de0-\x2dff]
  | [\x3005-\x3007]
  | [\x3021-\x302f]
  | [\x3031-\x3035]
  | [\x3038-\x303c]
  | [\x3041-\x3096]
  | [\x3099-\x309a]
  | [\x309d-\x309f]
  | [\x30a1-\x30ff]
  | [\x3105-\x312f]
  | [\x3131-\x318e]
  | [\x31a0-\x31bf]
  | [\x31f0-\x31ff]
  | [\x3400-\x4dbf]
  | [\x4e00-\xa48c]
  | [\xa4d0-\xa4fd]
  | [\xa500-\xa60c]
  | [\xa610-\xa62b]
  | [\xa640-\xa66f]
  | [\xa674-\xa67d]
  | [\xa67f-\xa6f1]
  | [\xa717-\xa71f]
  | [\xa722-\xa788]
  | [\xa78b-\xa7ca]
  | [\xa7d0-\xa7d1]
  | \xa7d3
  | [\xa7d5-\xa7d9]
  | [\xa7f2-\xa827]
  | \xa82c
  | [\xa840-\xa873]
  | [\xa880-\xa8c5]
  | [\xa8d0-\xa8d9]
  | [\xa8e0-\xa8f7]
  | \xa8fb
  | [\xa8fd-\xa92d]
  | [\xa930-\xa953]
  | [\xa960-\xa97c]
  | [\xa980-\xa9c0]
  | [\xa9cf-\xa9d9]
  | [\xa9e0-\xa9fe]
  | [\xaa00-\xaa36]
  | [\xaa40-\xaa4d]
  | [\xaa50-\xaa59]
  | [\xaa60-\xaa76]
  | [\xaa7a-\xaac2]
  | [\xaadb-\xaadd]
  | [\xaae0-\xaaef]
  | [\xaaf2-\xaaf6]
  | [\xab01-\xab06]
  | [\xab09-\xab0e]
  | [\xab11-\xab16]
  | [\xab20-\xab26]
  | [\xab28-\xab2e]
  | [\xab30-\xab5a]
  | [\xab5c-\xab69]
  | [\xab70-\xabea]
  | [\xabec-\xabed]
  | [\xabf0-\xabf9]
  | [\xac00-\xd7a3]
  | [\xd7b0-\xd7c6]
  | [\xd7cb-\xd7fb]
  | [\xf900-\xfa6d]
  | [\xfa70-\xfad9]
  | [\xfb00-\xfb06]
  | [\xfb13-\xfb17]
  | [\xfb1d-\xfb28]
  | [\xfb2a-\xfb36]
  | [\xfb38-\xfb3c]
  | \xfb3e
  | [\xfb40-\xfb41]
  | [\xfb43-\xfb44]
  | [\xfb46-\xfbb1]
  | [\xfbd3-\xfc5d]
  | [\xfc64-\xfd3d]
  | [\xfd50-\xfd8f]
  | [\xfd92-\xfdc7]
  | [\xfdf0-\xfdf9]
  | [\xfe00-\xfe0f]
  | [\xfe20-\xfe2f]
  | [\xfe33-\xfe34]
  | [\xfe4d-\xfe4f]
  | \xfe71
  | \xfe73
  | \xfe77
  | \xfe79
  | \xfe7b
  | \xfe7d
  | [\xfe7f-\xfefc]
  | [\xff10-\xff19]
  | [\xff21-\xff3a]
  | \xff3f
  | [\xff41-\xff5a]
  | [\xff65-\xffbe]
  | [\xffc2-\xffc7]
  | [\xffca-\xffcf]
  | [\xffd2-\xffd7]
  | [\xffda-\xffdc]
  | [\x10000-\x1000b]
  | [\x1000d-\x10026]
  | [\x10028-\x1003a]
  | [\x1003c-\x1003d]
  | [\x1003f-\x1004d]
  | [\x10050-\x1005d]
  | [\x10080-\x100fa]
  | [\x10140-\x10174]
  | \x101fd
  | [\x10280-\x1029c]
  | [\x102a0-\x102d0]
  | \x102e0
  | [\x10300-\x1031f]
  | [\x1032d-\x1034a]
  | [\x10350-\x1037a]
  | [\x10380-\x1039d]
  | [\x103a0-\x103c3]
  | [\x103c8-\x103cf]
  | [\x103d1-\x103d5]
  | [\x10400-\x1049d]
  | [\x104a0-\x104a9]
  | [\x104b0-\x104d3]
  | [\x104d8-\x104fb]
  | [\x10500-\x10527]
  | [\x10530-\x10563]
  | [\x10570-\x1057a]
  | [\x1057c-\x1058a]
  | [\x1058c-\x10592]
  | [\x10594-\x10595]
  | [\x10597-\x105a1]
  | [\x105a3-\x105b1]
  | [\x105b3-\x105b9]
  | [\x105bb-\x105bc]
  | [\x10600-\x10736]
  | [\x10740-\x10755]
  | [\x10760-\x10767]
  | [\x10780-\x10785]
  | [\x10787-\x107b0]
  | [\x107b2-\x107ba]
  | [\x10800-\x10805]
  | \x10808
  | [\x1080a-\x10835]
  | [\x10837-\x10838]
  | \x1083c
  | [\x1083f-\x10855]
  | [\x10860-\x10876]
  | [\x10880-\x1089e]
  | [\x108e0-\x108f2]
  | [\x108f4-\x108f5]
  | [\x10900-\x10915]
  | [\x10920-\x10939]
  | [\x10980-\x109b7]
  | [\x109be-\x109bf]
  | [\x10a00-\x10a03]
  | [\x10a05-\x10a06]
  | [\x10a0c-\x10a13]
  | [\x10a15-\x10a17]
  | [\x10a19-\x10a35]
  | [\x10a38-\x10a3a]
  | \x10a3f
  | [\x10a60-\x10a7c]
  | [\x10a80-\x10a9c]
  | [\x10ac0-\x10ac7]
  | [\x10ac9-\x10ae6]
  | [\x10b00-\x10b35]
  | [\x10b40-\x10b55]
  | [\x10b60-\x10b72]
  | [\x10b80-\x10b91]
  | [\x10c00-\x10c48]
  | [\x10c80-\x10cb2]
  | [\x10cc0-\x10cf2]
  | [\x10d00-\x10d27]
  | [\x10d30-\x10d39]
  | [\x10e80-\x10ea9]
  | [\x10eab-\x10eac]
  | [\x10eb0-\x10eb1]
  | [\x10efd-\x10f1c]
  | \x10f27
  | [\x10f30-\x10f50]
  | [\x10f70-\x10f85]
  | [\x10fb0-\x10fc4]
  | [\x10fe0-\x10ff6]
  | [\x11000-\x11046]
  | [\x11066-\x11075]
  | [\x1107f-\x110ba]
  | \x110c2
  | [\x110d0-\x110e8]
  | [\x110f0-\x110f9]
  | [\x11100-\x11134]
  | [\x11136-\x1113f]
  | [\x11144-\x11147]
  | [\x11150-\x11173]
  | \x11176
  | [\x11180-\x111c4]
  | [\x111c9-\x111cc]
  | [\x111ce-\x111da]
  | \x111dc
  | [\x11200-\x11211]
  | [\x11213-\x11237]
  | [\x1123e-\x11241]
  | [\x11280-\x11286]
  | \x11288
  | [\x1128a-\x1128d]
  | [\x1128f-\x1129d]
  | [\x1129f-\x112a8]
  | [\x112b0-\x112ea]
  | [\x112f0-\x112f9]
  | [\x11300-\x11303]
  | [\x11305-\x1130c]
  | [\x1130f-\x11310]
  | [\x11313-\x11328]
  | [\x1132a-\x11330]
  | [\x11332-\x11333]
  | [\x11335-\x11339]
  | [\x1133b-\x11344]
  | [\x11347-\x11348]
  | [\x1134b-\x1134d]
  | \x11350
  | \x11357
  | [\x1135d-\x11363]
  | [\x11366-\x1136c]
  | [\x11370-\x11374]
  | [\x11400-\x1144a]
  | [\x11450-\x11459]
  | [\x1145e-\x11461]
  | [\x11480-\x114c5]
  | \x114c7
  | [\x114d0-\x114d9]
  | [\x11580-\x115b5]
  | [\x115b8-\x115c0]
  | [\x115d8-\x115dd]
  | [\x11600-\x11640]
  | \x11644
  | [\x11650-\x11659]
  | [\x11680-\x116b8]
  | [\x116c0-\x116c9]
  | [\x11700-\x1171a]
  | [\x1171d-\x1172b]
  | [\x11730-\x11739]
  | [\x11740-\x11746]
  | [\x11800-\x1183a]
  | [\x118a0-\x118e9]
  | [\x118ff-\x11906]
  | \x11909
  | [\x1190c-\x11913]
  | [\x11915-\x11916]
  | [\x11918-\x11935]
  | [\x11937-\x11938]
  | [\x1193b-\x11943]
  | [\x11950-\x11959]
  | [\x119a0-\x119a7]
  | [\x119aa-\x119d7]
  | [\x119da-\x119e1]
  | [\x119e3-\x119e4]
  | [\x11a00-\x11a3e]
  | \x11a47
  | [\x11a50-\x11a99]
  | \x11a9d
  | [\x11ab0-\x11af8]
  | [\x11c00-\x11c08]
  | [\x11c0a-\x11c36]
  | [\x11c38-\x11c40]
  | [\x11c50-\x11c59]
  | [\x11c72-\x11c8f]
  | [\x11c92-\x11ca7]
  | [\x11ca9-\x11cb6]
  | [\x11d00-\x11d06]
  | [\x11d08-\x11d09]
  | [\x11d0b-\x11d36]
  | \x11d3a
  | [\x11d3c-\x11d3d]
  | [\x11d3f-\x11d47]
  | [\x11d50-\x11d59]
  | [\x11d60-\x11d65]
  | [\x11d67-\x11d68]
  | [\x11d6a-\x11d8e]
  | [\x11d90-\x11d91]
  | [\x11d93-\x11d98]
  | [\x11da0-\x11da9]
  | [\x11ee0-\x11ef6]
  | [\x11f00-\x11f10]
  | [\x11f12-\x11f3a]
  | [\x11f3e-\x11f42]
  | [\x11f50-\x11f59]
  | \x11fb0
  | [\x12000-\x12399]
  | [\x12400-\x1246e]
  | [\x12480-\x12543]
  | [\x12f90-\x12ff0]
  | [\x13000-\x1342f]
  | [\x13440-\x13455]
  | [\x14400-\x14646]
  | [\x16800-\x16a38]
  | [\x16a40-\x16a5e]
  | [\x16a60-\x16a69]
  | [\x16a70-\x16abe]
  | [\x16ac0-\x16ac9]
  | [\x16ad0-\x16aed]
  | [\x16af0-\x16af4]
  | [\x16b00-\x16b36]
  | [\x16b40-\x16b43]
  | [\x16b50-\x16b59]
  | [\x16b63-\x16b77]
  | [\x16b7d-\x16b8f]
  | [\x16e40-\x16e7f]
  | [\x16f00-\x16f4a]
  | [\x16f4f-\x16f87]
  | [\x16f8f-\x16f9f]
  | [\x16fe0-\x16fe1]
  | [\x16fe3-\x16fe4]
  | [\x16ff0-\x16ff1]
  | [\x17000-\x187f7]
  | [\x18800-\x18cd5]
  | [\x18d00-\x18d08]
  | [\x1aff0-\x1aff3]
  | [\x1aff5-\x1affb]
  | [\x1affd-\x1affe]
  | [\x1b000-\x1b122]
  | \x1b132
  | [\x1b150-\x1b152]
  | \x1b155
  | [\x1b164-\x1b167]
  | [\x1b170-\x1b2fb]
  | [\x1bc00-\x1bc6a]
  | [\x1bc70-\x1bc7c]
  | [\x1bc80-\x1bc88]
  | [\x1bc90-\x1bc99]
  | [\x1bc9d-\x1bc9e]
  | [\x1cf00-\x1cf2d]
  | [\x1cf30-\x1cf46]
  | [\x1d165-\x1d169]
  | [\x1d16d-\x1d172]
  | [\x1d17b-\x1d182]
  | [\x1d185-\x1d18b]
  | [\x1d1aa-\x1d1ad]
  | [\x1d242-\x1d244]
  | [\x1d400-\x1d454]
  | [\x1d456-\x1d49c]
  | [\x1d49e-\x1d49f]
  | \x1d4a2
  | [\x1d4a5-\x1d4a6]
  | [\x1d4a9-\x1d4ac]
  | [\x1d4ae-\x1d4b9]
  | \x1d4bb
  | [\x1d4bd-\x1d4c3]
  | [\x1d4c5-\x1d505]
  | [\x1d507-\x1d50a]
  | [\x1d50d-\x1d514]
  | [\x1d516-\x1d51c]
  | [\x1d51e-\x1d539]
  | [\x1d53b-\x1d53e]
  | [\x1d540-\x1d544]
  | \x1d546
  | [\x1d54a-\x1d550]
  | [\x1d552-\x1d6a5]
  | [\x1d6a8-\x1d6c0]
  | [\x1d6c2-\x1d6da]
  | [\x1d6dc-\x1d6fa]
  | [\x1d6fc-\x1d714]
  | [\x1d716-\x1d734]
  | [\x1d736-\x1d74e]
  | [\x1d750-\x1d76e]
  | [\x1d770-\x1d788]
  | [\x1d78a-\x1d7a8]
  | [\x1d7aa-\x1d7c2]
  | [\x1d7c4-\x1d7cb]
  | [\x1d7ce-\x1d7ff]
  | [\x1da00-\x1da36]
  | [\x1da3b-\x1da6c]
  | \x1da75
  | \x1da84
  | [\x1da9b-\x1da9f]
  | [\x1daa1-\x1daaf]
  | [\x1df00-\x1df1e]
  | [\x1df25-\x1df2a]
  | [\x1e000-\x1e006]
  | [\x1e008-\x1e018]
  | [\x1e01b-\x1e021]
  | [\x1e023-\x1e024]
  | [\x1e026-\x1e02a]
  | [\x1e030-\x1e06d]
  | \x1e08f
  | [\x1e100-\x1e12c]
  | [\x1e130-\x1e13d]
  | [\x1e140-\x1e149]
  | \x1e14e
  | [\x1e290-\x1e2ae]
  | [\x1e2c0-\x1e2f9]
  | [\x1e4d0-\x1e4f9]
  | [\x1e7e0-\x1e7e6]
  | [\x1e7e8-\x1e7eb]
  | [\x1e7ed-\x1e7ee]
  | [\x1e7f0-\x1e7fe]
  | [\x1e800-\x1e8c4]
  | [\x1e8d0-\x1e8d6]
  | [\x1e900-\x1e94b]
  | [\x1e950-\x1e959]
  | [\x1ee00-\x1ee03]
  | [\x1ee05-\x1ee1f]
  | [\x1ee21-\x1ee22]
  | \x1ee24
  | \x1ee27
  | [\x1ee29-\x1ee32]
  | [\x1ee34-\x1ee37]
  | \x1ee39
  | \x1ee3b
  | \x1ee42
  | \x1ee47
  | \x1ee49
  | \x1ee4b
  | [\x1ee4d-\x1ee4f]
  | [\x1ee51-\x1ee52]
  | \x1ee54
  | \x1ee57
  | \x1ee59
  | \x1ee5b
  | \x1ee5d
  | \x1ee5f
  | [\x1ee61-\x1ee62]
  | \x1ee64
  | [\x1ee67-\x1ee6a]
  | [\x1ee6c-\x1ee72]
  | [\x1ee74-\x1ee77]
  | [\x1ee79-\x1ee7c]
  | \x1ee7e
  | [\x1ee80-\x1ee89]
  | [\x1ee8b-\x1ee9b]
  | [\x1eea1-\x1eea3]
  | [\x1eea5-\x1eea9]
  | [\x1eeab-\x1eebb]
  | [\x1fbf0-\x1fbf9]
  | [\x20000-\x2a6df]
  | [\x2a700-\x2b739]
  | [\x2b740-\x2b81d]
  | [\x2b820-\x2cea1]
  | [\x2ceb0-\x2ebe0]
  | [\x2ebf0-\x2ee5d]
  | [\x2f800-\x2fa1d]
  | [\x30000-\x3134a]
  | [\x31350-\x323af]
  | [\xe0100-\xe01ef]

-- End of code generated by "scripts/unicode.py".

-- See https://github.com/rust-lang/rust/blob/ac77e88f7a84e20311f5518e34c806503d586c1c/compiler/rustc_lexer/src/lib.rs#L313-L326
@id_start       = "_" | @XID_Start
@id_continue    = @XID_Continue

@ident             = @id_start @id_continue*
@raw_ident         = r \# @ident

@lifetime          = \' @ident

$hexit             = [0-9a-fA-F]

@char_escape
  = [nrt\\'"0]
  | [xX] [0-7] $hexit
  | u\{ $hexit \}
  | u\{ $hexit $hexit \}
  | u\{ $hexit $hexit $hexit \}
  | u\{ $hexit $hexit $hexit $hexit \}
  | u\{ $hexit $hexit $hexit $hexit $hexit \}
  | u\{ $hexit $hexit $hexit $hexit $hexit $hexit \}

@byte_escape
  = [xX] $hexit $hexit
  | [nrt\\'"0]

-- literals

@lit_char
  = \' ( \\ @char_escape
       | [^\\'\n\t\r]
       | [ \ud800-\udbff \udc00-\udfff ]
       )
    \'

@lit_byte
  = b\' ( \\ @byte_escape
        | [^\\'\n\t\r] [ \udc00-\udfff ]?
        )
    \'

@lit_integer
  = [0-9][0-9_]*
  | 0b [01_]+
  | 0o [0-8_]+
  | 0x [0-9a-fA-F_]+

@decimal_suffix    = \. [0-9][0-9_]*
@exponent_suffix   = [eE] [\-\+]? [0-9][0-9_]*

@lit_float         = [0-9][0-9_]* @decimal_suffix? @exponent_suffix?
@lit_float2        = [0-9][0-9_]* \.

@lit_str           =   \" (\\\n | \\\r\n | \\ @char_escape | [^\\\"] | \n | \r)* \"
@lit_byte_str      = b \" (\\\n | \\\r\n | \\ @byte_escape | [^\\\"] | \n | \r)* \"

@lit_raw_str       = r \#* \"
@lit_raw_bstr      = br \#* \"


-- Comments

@outer_doc_line    = "///" ( [^\r\n\/] [^\r\n]* )?
@outer_doc_inline  = "/**"

@inner_doc_line    = "//!" [^\r\n]*
@inner_doc_inline  = "/*!"

@line_comment      = "//" ( [^\n\/]* [^\n]* )?
@inline_comment    = "/*"

-- Macro related

@subst_nt          = "$" @ident

tokens :-

$white+         { \s -> pure (Space Whitespace s)  }

"="             { token Equal }
"<"             { token Less }
">"             { token Greater }
"&"             { token Ampersand }
"|"             { token Pipe }
"!"             { token Exclamation }
"~"             { token Tilde }
"+"             { token Plus }
"-"             { token Minus }
"*"             { token Star }
"/"             { token Slash }
"%"             { token Percent }
"^"             { token Caret }

"||"            { token PipePipe }
"&&"            { token AmpersandAmpersand }
">="            { token GreaterEqual }
">>="           { token GreaterGreaterEqual }
"<<"            { token LessLess }
">>"            { token GreaterGreater }

"=="            { token EqualEqual }
"!="            { token NotEqual }
"<="            { token LessEqual }
"<<="           { token LessLessEqual }
"-="            { token MinusEqual }
"&="            { token AmpersandEqual }
"|="            { token PipeEqual }
"+="            { token PlusEqual }
"*="            { token StarEqual }
"/="            { token SlashEqual }
"^="            { token CaretEqual }
"%="            { token PercentEqual }


"@"             { token At }
"."             { token Dot }
".."            { token DotDot }
"..."           { token DotDotDot }
"..="           { token DotDotEqual }
","             { token Comma }
";"             { token Semicolon }
":"             { token Colon }
"::"            { token ModSep }
"->"            { token RArrow }
"<-"            { token LArrow }
"=>"            { token FatArrow }
"("             { token (OpenDelim Paren) }
")"             { token (CloseDelim Paren) }
"["             { token (OpenDelim Bracket) }
"]"             { token (CloseDelim Bracket) }
"{"             { token (OpenDelim Brace) }
"}"             { token (CloseDelim Brace) }
"#"             { token Pound }
"$"             { token Dollar }

@lit_integer    { \i -> literal (IntegerTok i) }
@lit_float      { \f -> literal (FloatTok   f) }
@lit_float2 / ( [^\._a-zA-Z] | \r | \n )
                { \f -> literal (FloatTok   f) }
@lit_float2 / { \_ _ _ (_,is) -> inputStreamEmpty is }
                { \f -> literal (FloatTok   f) }

@lit_byte       { \c -> literal (ByteTok    (drop 2 (init c))) }
@lit_char       { \c -> literal (CharTok    (drop 1 (init c))) }
@lit_str        { \s -> literal (StrTok     (cleanWindowsNewlines (drop 1 (init s)))) }
@lit_byte_str   { \s -> literal (ByteStrTok (cleanWindowsNewlines (drop 2 (init s)))) }

@lit_raw_str    { \s -> let n = length s - 2
                        in do
                            str <- cleanWindowsNewlines `fmap` rawString n
                            literal (StrRawTok str (fromIntegral n))
                }
@lit_raw_bstr   { \s -> let n = length s - 3
                        in do
                            str <- cleanWindowsNewlines `fmap` rawString n
                            literal (ByteStrRawTok str (fromIntegral n))
                }

<lits> ""       ;
<lits> @ident   { \s -> pure (IdentTok (mkIdent s)) }

\?              { token Question }
@raw_ident      { \s -> pure (IdentTok ((mkIdent (drop 2 s)){ raw = True })) }
@ident          { \s -> pure (IdentTok (mkIdent s)) }
@lifetime       { \s -> (pure (LifetimeTok (mkIdent (tail s))) :: P Token) }


@outer_doc_line { \c -> pure (Doc (drop 3 c) Outer False) }
@outer_doc_line \r { \c -> pure (Doc (drop 3 (init c)) Outer False) }
@outer_doc_inline / ( [^\*] | \r | \n )
                  { \_ -> Doc <$> nestedComment <*> pure Outer <*> pure True }

@inner_doc_line   { \c -> pure (Doc (drop 3 c) Inner False) }
@inner_doc_inline { \_ -> Doc <$> nestedComment <*> pure Inner <*> pure True }

@line_comment     { \c -> pure (Space Comment (drop 2 c)) }
@inline_comment   { \_ -> Space Comment <$> nestedComment }

{

-- | Make a token.
token :: Token -> String -> P Token
token t _ = pure t

-- | Given the first part of a literal, try to parse also a suffix. Even if
-- the allowed suffixes are very well defined and only valid on integer and
-- float literals, we need to put in the same token whatever suffix follows.
-- This is for backwards compatibility if Rust decides to ever add suffixes.
literal :: LitTok -> P Token
literal lit = do
  pos <- getPosition
  inp <- getInput
  case alexScan (pos,inp) lits of
    AlexToken (pos',inp') len action -> do
        tok <- action (peekChars len inp)
        case tok of
          IdentTok Ident { name = suf, raw = False } -> do
            setPosition pos'
            setInput inp'
            pure (LiteralTok lit (Just suf))
          _ -> pure (LiteralTok lit Nothing)
    _ -> pure (LiteralTok lit Nothing)

-- | Parses a raw string, the closing quotation, and the appropriate number of
-- '#' characters.
rawString :: Int -> P String
rawString n = do
  c_m <- nextChar
  case c_m of
    -- The string was never closed
    Nothing -> fail "Invalid raw (byte)string"

    -- The string has a chance of being closed
    Just '"' -> do
      n' <- greedyChar '#' n
      if n' == n
        then pure ""
        else (('"' : replicate n' '#') ++) <$> rawString n

    -- Just another character...
    Just c -> ([c] ++) <$> rawString n

-- | Consume a full inline comment (which may be nested).
nestedComment :: P String
nestedComment = go 1 ""
  where
    go :: Int -> String -> P String
    go 0 s = pure (reverse (drop 2 s))
    go n s = do
      c <- nextChar
      case c of
        Nothing -> fail "Unclosed comment"
        Just '*' -> do
          c' <- peekChar
          case c' of
            Nothing -> fail "Unclosed comment"
            Just '/' -> nextChar *> go (n-1) ('/':'*':s)
            Just _ -> go n ('*':s)
        Just '/' -> do
          c' <- peekChar
          case c' of
            Nothing -> fail "Unclosed comment"
            Just '*' -> nextChar *> go (n+1) ('*':'/':s)
            Just _ -> go n ('/':s)
        Just c' -> go n (c':s)


-- Monadic functions

-- | Retrieve the next character (if there is one), updating the parser state accordingly.
nextChar :: P (Maybe Char)
nextChar = do
  pos <- getPosition
  inp <- getInput
  if inputStreamEmpty inp
    then pure Nothing
    else let (c,inp') = takeChar inp
             pos' = alexMove pos c
         in pos' `seq` (setPosition pos' *> setInput inp' *> pure (Just c))

-- | Retrieve the next character (if there is one), without updating the
-- parser state.
peekChar :: P (Maybe Char)
peekChar = do
  inp <- getInput
  if inputStreamEmpty inp
    then pure Nothing
    else let (c,_) = takeChar inp
         in pure (Just c)

-- | Greedily try to eat as many of a given character as possible (and return
-- how many characters were eaten). The second argument is an upper limit.
greedyChar :: Char -> Int -> P Int
greedyChar _ 0 = pure 0
greedyChar c limit = do
  c_m <- peekChar
  case c_m of
    Just c' | c == c' -> do { _ <- nextChar; n <- greedyChar c (limit - 1); pure (n+1) }
    _ -> pure 0

-- | Signal a lexical error.
lexicalError :: P a
lexicalError = do
  c <- peekChar
  fail ("Lexical error: the character " ++ show c ++ " does not fit here")


-- Functions required by Alex

-- | type passed around by Alex functions (required by Alex)
type AlexInput = (Position,    -- current position,
                  InputStream) -- current input string

-- | get previous character (required by Alex). Since this is never used, the
-- implementation just raises an error.
alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar _ = error "alexInputPrevChar not used"

-- | get the next byte and new input from the current input (required by Alex
-- 3.0)
alexGetByte :: AlexInput -> Maybe (Word8, AlexInput)
alexGetByte (pos,inp)
  | inputStreamEmpty inp = Nothing
  | otherwise = let (b,inp') = takeByte inp
                    -- this is safe for latin-1, but ugly
                    pos' = alexMove pos (chr (fromIntegral b))
                in pos' `seq` Just (b, (pos', inp'))

-- | find the new position given the next character
alexMove :: Position -> Char -> Position
alexMove pos ' '  = incPos pos 1
alexMove pos '\n' = retPos pos
alexMove pos '\r' = incOffset pos 1
alexMove pos _    = incPos pos 1

-- | Lexer for one 'Token'. The only token this cannot produce is 'Interpolated'.
lexToken :: P (Spanned Token)
lexToken = do
  tok_maybe <- popToken
  case tok_maybe of
    Just tok -> pure tok
    Nothing -> do
      pos <- getPosition
      inp <- getInput
      case alexScan (pos, inp) 0 of
        AlexEOF                 -> pure (Spanned Eof (Span pos pos))
        AlexError _             -> fail "lexical error"
        AlexSkip  (pos',inp') _ -> setPosition pos' *> setInput inp' *> lexToken
        AlexToken (pos',inp') len action -> do
          setPosition pos'
          setInput inp'
          tok <- action (peekChars len inp)
          tok' <- swapToken tok
          pos'' <- getPosition
          return (Spanned tok' (Span pos pos''))

-- | Lexer for one non-whitespace 'Token'. The only tokens this cannot produce are 'Interpolated'
-- and 'Space' (which includes comments that aren't doc comments).
lexNonSpace :: P (Spanned Token)
lexNonSpace = do
  tok <- lexToken
  case tok of
    Spanned Space{} _ -> lexNonSpace
    _ -> pure tok

-- | Apply the given lexer repeatedly until (but not including) the 'Eof' token. Meant for debugging
-- purposes - in general this defeats the point of a threaded lexer.
lexTokens :: P (Spanned Token) -> P [Spanned Token]
lexTokens lexer = do
  tok <- lexer
  case tok of
    Spanned Eof _ -> pure []
    _ -> (tok :) <$> lexTokens lexer

-- | Lex the first line, if it immediately starts with @#!@ (but not @#![@ - that should be an
-- inner attribute). If this fails to find a shebang line, it consumes no input.
lexShebangLine :: P (Maybe String)
lexShebangLine = do
  inp <- getInput
  case peekChars 3 inp of
    '#':'!':r | r /= "[" -> Just <$> toNewline
    _ -> pure Nothing
  where
  -- Lexes a string until a newline
  toNewline :: P String
  toNewline = do
    c <- peekChar
    case c of
      Nothing -> pure ""
      Just '\n' -> pure ""
      Just c' -> do
        _ <- nextChar
        (c' :) <$> toNewline

-- | If we're running on Windows, we need to normalize to "\n" instead of "\r\n", to match Rust's
-- handling of newlines in strings.
cleanWindowsNewlines :: String -> String
cleanWindowsNewlines ""               = ""
cleanWindowsNewlines ('\r':'\n':rest) = '\n' : cleanWindowsNewlines rest
cleanWindowsNewlines (x:rest)         = x    : cleanWindowsNewlines rest
}
